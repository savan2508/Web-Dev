"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("../utils");
const BaseCommand_1 = tslib_1.__importDefault(require("./BaseCommand"));
class CreateCommand extends BaseCommand_1.default {
    constructor() {
        super({
            name: 'create',
            description: 'Create a new project powered by @sabertazimi/react-scripts',
            usage: 'create <appName>',
        });
        this.command = 'npx';
        this.commandArgs = [];
    }
    run(appName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.processTemplateAction();
            this.resolveAppPath(appName);
            this.execute();
        });
    }
    getCommand() {
        return this.command;
    }
    getCommandArgs() {
        return this.commandArgs;
    }
    processTemplateAction() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { templateName } = yield utils_1.inquirer.prompt([
                {
                    name: 'templateName',
                    type: 'list',
                    message: 'Select template:',
                    choices: [...CreateCommand.TemplateActions],
                },
            ]);
            const { command, args } = CreateCommand.TemplateActions.find(({ value }) => value === templateName);
            this.command = command;
            this.commandArgs = [...args];
        });
    }
    resolveAppPath(appName) {
        this.commandArgs.push(appName);
    }
    execute() {
        const proc = utils_1.spawn.sync(this.command, this.commandArgs, {
            stdio: 'inherit',
        });
        if (proc.status !== 0) {
            throw new Error(`\n\`${this.command} ${this.commandArgs.join(' ')}\` exited.`);
        }
    }
}
CreateCommand.TemplateActions = [
    {
        name: 'Simple',
        value: 'simple',
        command: 'git',
        args: [
            'clone',
            '--depth=1',
            'https://github.com/sabertazimi/boilerplate',
        ],
    },
    {
        name: 'React JSX',
        value: 'jsx',
        command: 'npx',
        args: [
            'create-react-app@latest',
            '--template',
            '@sabertazimi',
            '--scripts-version',
            '@sabertazimi/react-scripts',
        ],
    },
    {
        name: 'React TSX',
        value: 'tsx',
        command: 'npx',
        args: [
            'create-react-app@latest',
            '--template',
            '@sabertazimi/typescript',
            '--scripts-version',
            '@sabertazimi/react-scripts',
        ],
    },
    {
        name: 'React Framework',
        value: 'framework',
        command: 'npx',
        args: [
            'create-react-app@latest',
            '--template',
            'bod',
            '--scripts-version',
            '@sabertazimi/react-scripts',
        ],
    },
];
exports.default = CreateCommand;
